//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Gamecontrols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Gamecontrols: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Gamecontrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Gamecontrols"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""72d088c4-488c-4f75-8c1e-20cd1a420c84"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb4f9ca7-513c-4f38-b15c-2b4465918a43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sing1"",
                    ""type"": ""Value"",
                    ""id"": ""3199ae4c-6892-4003-a64a-7cb994ebe3f5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sing2"",
                    ""type"": ""Value"",
                    ""id"": ""71f1d638-94e5-4fd2-8ebf-69cc6be56612"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jumppress"",
                    ""type"": ""Button"",
                    ""id"": ""2aee2c20-237c-45ca-be11-7d6dc9662965"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jumpboth"",
                    ""type"": ""Button"",
                    ""id"": ""b09c88a6-8d16-4bcb-b630-3842fb689e52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jumprelease"",
                    ""type"": ""Button"",
                    ""id"": ""5eef13c1-f873-456f-80b3-c7effafc52c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be898f70-0369-4494-908b-e4415735c461"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a1be10d7-fd42-4e25-b755-6b9fd8f9e950"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sing2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""18a4ffb2-7893-4564-93f2-ab93c68a87ad"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sing2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dbea1eee-f7fb-45a0-89dc-fe43cb8eafa5"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sing2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b4b01d09-dceb-42ef-a72e-66d76af66b08"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumppress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9f16b49f-cc2c-42f6-ab27-8098072e3c74"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sing1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a148204e-1808-4744-8ff6-0f7ffd8ce7c5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sing1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""22389a8d-9681-4be6-8b63-2ca7e5daf195"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sing1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a1e872b1-784d-4b61-a26c-1c33dd1dfc4b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumpboth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb3c44fc-d9f4-4e37-b75f-625f16080655"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumpboth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb47916f-1d99-42fc-85ba-78f9e1be6deb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumprelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Sing1 = m_Player.FindAction("Sing1", throwIfNotFound: true);
        m_Player_Sing2 = m_Player.FindAction("Sing2", throwIfNotFound: true);
        m_Player_Jumppress = m_Player.FindAction("Jumppress", throwIfNotFound: true);
        m_Player_Jumpboth = m_Player.FindAction("Jumpboth", throwIfNotFound: true);
        m_Player_Jumprelease = m_Player.FindAction("Jumprelease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Sing1;
    private readonly InputAction m_Player_Sing2;
    private readonly InputAction m_Player_Jumppress;
    private readonly InputAction m_Player_Jumpboth;
    private readonly InputAction m_Player_Jumprelease;
    public struct PlayerActions
    {
        private @Gamecontrols m_Wrapper;
        public PlayerActions(@Gamecontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Sing1 => m_Wrapper.m_Player_Sing1;
        public InputAction @Sing2 => m_Wrapper.m_Player_Sing2;
        public InputAction @Jumppress => m_Wrapper.m_Player_Jumppress;
        public InputAction @Jumpboth => m_Wrapper.m_Player_Jumpboth;
        public InputAction @Jumprelease => m_Wrapper.m_Player_Jumprelease;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sing1.started += instance.OnSing1;
            @Sing1.performed += instance.OnSing1;
            @Sing1.canceled += instance.OnSing1;
            @Sing2.started += instance.OnSing2;
            @Sing2.performed += instance.OnSing2;
            @Sing2.canceled += instance.OnSing2;
            @Jumppress.started += instance.OnJumppress;
            @Jumppress.performed += instance.OnJumppress;
            @Jumppress.canceled += instance.OnJumppress;
            @Jumpboth.started += instance.OnJumpboth;
            @Jumpboth.performed += instance.OnJumpboth;
            @Jumpboth.canceled += instance.OnJumpboth;
            @Jumprelease.started += instance.OnJumprelease;
            @Jumprelease.performed += instance.OnJumprelease;
            @Jumprelease.canceled += instance.OnJumprelease;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sing1.started -= instance.OnSing1;
            @Sing1.performed -= instance.OnSing1;
            @Sing1.canceled -= instance.OnSing1;
            @Sing2.started -= instance.OnSing2;
            @Sing2.performed -= instance.OnSing2;
            @Sing2.canceled -= instance.OnSing2;
            @Jumppress.started -= instance.OnJumppress;
            @Jumppress.performed -= instance.OnJumppress;
            @Jumppress.canceled -= instance.OnJumppress;
            @Jumpboth.started -= instance.OnJumpboth;
            @Jumpboth.performed -= instance.OnJumpboth;
            @Jumpboth.canceled -= instance.OnJumpboth;
            @Jumprelease.started -= instance.OnJumprelease;
            @Jumprelease.performed -= instance.OnJumprelease;
            @Jumprelease.canceled -= instance.OnJumprelease;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSing1(InputAction.CallbackContext context);
        void OnSing2(InputAction.CallbackContext context);
        void OnJumppress(InputAction.CallbackContext context);
        void OnJumpboth(InputAction.CallbackContext context);
        void OnJumprelease(InputAction.CallbackContext context);
    }
}
